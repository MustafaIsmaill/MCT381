
MCT381.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c30  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073b  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048a  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000696  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000028b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_1>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
		INT0count=0;
	}
}

void init(void){
	DDRD = 0xF0; //pins 4,5,6,7 ... Arduino pins 4,5,6,7
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<2)|(1<<3); //enable pull up
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8c 60       	ori	r24, 0x0C	; 12
  ae:	8b b9       	out	0x0b, r24	; 11
	EIMSK |= 0x03; //interrupt enable
  b0:	8d b3       	in	r24, 0x1d	; 29
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	8d bb       	out	0x1d, r24	; 29

	DDRB = 0x04; //pin 3 ... Arduino pin 10
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	84 b9       	out	0x04, r24	; 4
	DDRB |=(1<<4);
  ba:	24 9a       	sbi	0x04, 4	; 4

	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  bc:	e0 e8       	ldi	r30, 0x80	; 128
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 6a       	ori	r24, 0xA2	; 162
  c4:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8b 61       	ori	r24, 0x1B	; 27
  ce:	80 83       	st	Z, r24

	ICR1=4999; //PWM=50Hz (Period = 20ms Standard).
  d0:	87 e8       	ldi	r24, 0x87	; 135
  d2:	93 e1       	ldi	r25, 0x13	; 19
  d4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  d8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1B = 520;
  dc:	88 e0       	ldi	r24, 0x08	; 8
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  e4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  e8:	08 95       	ret

000000ea <main>:
volatile int count=0;
volatile int INT0count=0;
volatile int INT1count=0;

int main(void){  
	init();
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	83 e2       	ldi	r24, 0x23	; 35
  f2:	94 ef       	ldi	r25, 0xF4	; 244
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0xa>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x14>
  fe:	00 00       	nop
	_delay_ms(5000);

	sei(); 
 100:	78 94       	sei
 102:	ff cf       	rjmp	.-2      	; 0x102 <main+0x18>

00000104 <stepper>:

	ICR1=4999; //PWM=50Hz (Period = 20ms Standard).
	OCR1B = 520;
}

void stepper(int steps){
 104:	bc 01       	movw	r22, r24
	if(steps>0){
 106:	18 16       	cp	r1, r24
 108:	19 06       	cpc	r1, r25
 10a:	74 f5       	brge	.+92     	; 0x168 <stepper+0x64>
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	50 e0       	ldi	r21, 0x00	; 0
		for(int k=0;k<steps;k++){
			PORTD = step[count];
 110:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
 114:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	90 81       	ld	r25, Z
 11e:	9b b9       	out	0x0b, r25	; 11
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <stepper+0x22>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <stepper+0x2c>
 130:	00 00       	nop
			_delay_ms(delay);
			count++;
 132:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <count>
 136:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <count+0x1>
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <count+0x1>
 142:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <count>
			if(count == 4){ count = 0;}
 146:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <count>
 14a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <count+0x1>
 14e:	24 30       	cpi	r18, 0x04	; 4
 150:	31 05       	cpc	r19, r1
 152:	21 f4       	brne	.+8      	; 0x15c <stepper+0x58>
 154:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count+0x1>
 158:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count>
	OCR1B = 520;
}

void stepper(int steps){
	if(steps>0){
		for(int k=0;k<steps;k++){
 15c:	4f 5f       	subi	r20, 0xFF	; 255
 15e:	5f 4f       	sbci	r21, 0xFF	; 255
 160:	64 17       	cp	r22, r20
 162:	75 07       	cpc	r23, r21
 164:	a9 f6       	brne	.-86     	; 0x110 <stepper+0xc>
 166:	08 95       	ret
			_delay_ms(delay);
			count++;
			if(count == 4){ count = 0;}
		}
	}
	else if(steps<0){
 168:	99 23       	and	r25, r25
 16a:	6c f5       	brge	.+90     	; 0x1c6 <stepper+0xc2>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
		for(int k=0;k>steps;k--){
			PORTD = step[count];
			_delay_ms(delay);
			count--;
			if(count == -1){ count = 3;}
 170:	43 e0       	ldi	r20, 0x03	; 3
 172:	50 e0       	ldi	r21, 0x00	; 0
			if(count == 4){ count = 0;}
		}
	}
	else if(steps<0){
		for(int k=0;k>steps;k--){
			PORTD = step[count];
 174:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
 178:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 81       	ld	r24, Z
 182:	8b b9       	out	0x0b, r24	; 11
 184:	ef ef       	ldi	r30, 0xFF	; 255
 186:	89 ef       	ldi	r24, 0xF9	; 249
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	e1 50       	subi	r30, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <stepper+0x86>
 192:	00 c0       	rjmp	.+0      	; 0x194 <stepper+0x90>
 194:	00 00       	nop
			_delay_ms(delay);
			count--;
 196:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 19a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 1a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
			if(count == -1){ count = 3;}
 1a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 1ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	21 f4       	brne	.+8      	; 0x1bc <stepper+0xb8>
 1b4:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <count+0x1>
 1b8:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <count>
			count++;
			if(count == 4){ count = 0;}
		}
	}
	else if(steps<0){
		for(int k=0;k>steps;k--){
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	31 09       	sbc	r19, r1
 1c0:	62 17       	cp	r22, r18
 1c2:	73 07       	cpc	r23, r19
 1c4:	b9 f6       	brne	.-82     	; 0x174 <stepper+0x70>
 1c6:	08 95       	ret

000001c8 <gripper_toggle>:
		}
	}
}

void gripper_toggle(void){
	switch (OCR1B){
 1c8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1cc:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1d0:	8c 33       	cpi	r24, 0x3C	; 60
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	92 07       	cpc	r25, r18
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <gripper_toggle+0x18>
 1d8:	88 30       	cpi	r24, 0x08	; 8
 1da:	92 40       	sbci	r25, 0x02	; 2
 1dc:	a1 f0       	breq	.+40     	; 0x206 <gripper_toggle+0x3e>
 1de:	08 95       	ret
 1e0:	2c ec       	ldi	r18, 0xCC	; 204
 1e2:	30 e0       	ldi	r19, 0x00	; 0
		case 316:
			for(int i=0;i<204;i++){	
				OCR1B++;
 1e4:	ea e8       	ldi	r30, 0x8A	; 138
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	91 81       	ldd	r25, Z+1	; 0x01
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	80 83       	st	Z, r24
 1f2:	8f e1       	ldi	r24, 0x1F	; 31
 1f4:	9e e4       	ldi	r25, 0x4E	; 78
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <gripper_toggle+0x2e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <gripper_toggle+0x34>
 1fc:	00 00       	nop
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
}

void gripper_toggle(void){
	switch (OCR1B){
		case 316:
			for(int i=0;i<204;i++){	
 202:	91 f7       	brne	.-28     	; 0x1e8 <gripper_toggle+0x20>
 204:	08 95       	ret
		}
	}
}

void gripper_toggle(void){
	switch (OCR1B){
 206:	2c ec       	ldi	r18, 0xCC	; 204
 208:	30 e0       	ldi	r19, 0x00	; 0
				_delay_ms(5);
			}
			break;
		case 520:
			for(int i=0;i<204;i++){
				OCR1B--;
 20a:	ea e8       	ldi	r30, 0x8A	; 138
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	91 81       	ldd	r25, Z+1	; 0x01
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	91 83       	std	Z+1, r25	; 0x01
 216:	80 83       	st	Z, r24
 218:	8f e1       	ldi	r24, 0x1F	; 31
 21a:	9e e4       	ldi	r25, 0x4E	; 78
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <gripper_toggle+0x54>
 220:	00 c0       	rjmp	.+0      	; 0x222 <gripper_toggle+0x5a>
 222:	00 00       	nop
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1
				OCR1B++;
				_delay_ms(5);
			}
			break;
		case 520:
			for(int i=0;i<204;i++){
 228:	91 f7       	brne	.-28     	; 0x20e <gripper_toggle+0x46>
 22a:	08 95       	ret

0000022c <__vector_2>:
	//OCR1B = 316;
	while(1){
	}
}

ISR(INT1_vect){ //RIGHT
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	INT1count++;
 24e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 252:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 25c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	if(INT1count==10000){
 260:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 264:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 268:	80 31       	cpi	r24, 0x10	; 16
 26a:	97 42       	sbci	r25, 0x27	; 39
 26c:	e9 f5       	brne	.+122    	; 0x2e8 <__vector_2+0xbc>
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	91 ee       	ldi	r25, 0xE1	; 225
 272:	24 e0       	ldi	r18, 0x04	; 4
 274:	81 50       	subi	r24, 0x01	; 1
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	20 40       	sbci	r18, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <__vector_2+0x48>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <__vector_2+0x52>
 27e:	00 00       	nop
		_delay_ms(100);
		stepper(50);
 280:	82 e3       	ldi	r24, 0x32	; 50
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 82 00 	call	0x104	; 0x104 <stepper>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	91 ee       	ldi	r25, 0xE1	; 225
 28c:	24 e0       	ldi	r18, 0x04	; 4
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	20 40       	sbci	r18, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <__vector_2+0x62>
 296:	00 c0       	rjmp	.+0      	; 0x298 <__vector_2+0x6c>
 298:	00 00       	nop
		_delay_ms(100);
		gripper_toggle();
 29a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <gripper_toggle>
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	91 ee       	ldi	r25, 0xE1	; 225
 2a2:	24 e0       	ldi	r18, 0x04	; 4
 2a4:	81 50       	subi	r24, 0x01	; 1
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	20 40       	sbci	r18, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <__vector_2+0x78>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <__vector_2+0x82>
 2ae:	00 00       	nop
		_delay_ms(100);
		stepper(-50);
 2b0:	8e ec       	ldi	r24, 0xCE	; 206
 2b2:	9f ef       	ldi	r25, 0xFF	; 255
 2b4:	0e 94 82 00 	call	0x104	; 0x104 <stepper>
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	91 ee       	ldi	r25, 0xE1	; 225
 2bc:	24 e0       	ldi	r18, 0x04	; 4
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	20 40       	sbci	r18, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <__vector_2+0x92>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <__vector_2+0x9c>
 2c8:	00 00       	nop
		_delay_ms(100);
		gripper_toggle();
 2ca:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <gripper_toggle>
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	93 e2       	ldi	r25, 0x23	; 35
 2d2:	24 ef       	ldi	r18, 0xF4	; 244
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <__vector_2+0xa8>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <__vector_2+0xb2>
 2de:	00 00       	nop
		_delay_ms(5000);
		INT1count=0;
 2e0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 2e4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_1>:
ISR(INT0_vect){ //LEFT
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
	INT0count++;
 32c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INT0count>
 330:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INT0count+0x1>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <INT0count+0x1>
 33a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <INT0count>
	if(INT0count==10000){	
 33e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INT0count>
 342:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INT0count+0x1>
 346:	80 31       	cpi	r24, 0x10	; 16
 348:	97 42       	sbci	r25, 0x27	; 39
 34a:	e9 f5       	brne	.+122    	; 0x3c6 <__vector_1+0xbc>
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	91 ee       	ldi	r25, 0xE1	; 225
 350:	24 e0       	ldi	r18, 0x04	; 4
 352:	81 50       	subi	r24, 0x01	; 1
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	20 40       	sbci	r18, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <__vector_1+0x48>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <__vector_1+0x52>
 35c:	00 00       	nop
		_delay_ms(100);
		stepper(-50);
 35e:	8e ec       	ldi	r24, 0xCE	; 206
 360:	9f ef       	ldi	r25, 0xFF	; 255
 362:	0e 94 82 00 	call	0x104	; 0x104 <stepper>
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	91 ee       	ldi	r25, 0xE1	; 225
 36a:	24 e0       	ldi	r18, 0x04	; 4
 36c:	81 50       	subi	r24, 0x01	; 1
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	20 40       	sbci	r18, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <__vector_1+0x62>
 374:	00 c0       	rjmp	.+0      	; 0x376 <__vector_1+0x6c>
 376:	00 00       	nop
		_delay_ms(100);
		gripper_toggle();
 378:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <gripper_toggle>
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	91 ee       	ldi	r25, 0xE1	; 225
 380:	24 e0       	ldi	r18, 0x04	; 4
 382:	81 50       	subi	r24, 0x01	; 1
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	20 40       	sbci	r18, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <__vector_1+0x78>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <__vector_1+0x82>
 38c:	00 00       	nop
		_delay_ms(100);
		stepper(50);
 38e:	82 e3       	ldi	r24, 0x32	; 50
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 82 00 	call	0x104	; 0x104 <stepper>
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	91 ee       	ldi	r25, 0xE1	; 225
 39a:	24 e0       	ldi	r18, 0x04	; 4
 39c:	81 50       	subi	r24, 0x01	; 1
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	20 40       	sbci	r18, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <__vector_1+0x92>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <__vector_1+0x9c>
 3a6:	00 00       	nop
		_delay_ms(100);
		gripper_toggle();
 3a8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <gripper_toggle>
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	93 e2       	ldi	r25, 0x23	; 35
 3b0:	24 ef       	ldi	r18, 0xF4	; 244
 3b2:	81 50       	subi	r24, 0x01	; 1
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	20 40       	sbci	r18, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <__vector_1+0xa8>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <__vector_1+0xb2>
 3bc:	00 00       	nop
		_delay_ms(5000);
		INT0count=0;
 3be:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <INT0count+0x1>
 3c2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <INT0count>
	}
}
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
